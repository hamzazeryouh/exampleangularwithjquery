[Index(nameof(CurrentStatus), nameof(OfferId))]
public class Offer
{
    public int OfferId { get; set; }
    public DateTime Date { get; set; }
    public string CurrentStatus { get; set; }
    public List<string> PreviousStatuses { get; set; }
    public decimal CurrentOfferAmount { get; set; }
    public List<OfferAmount> OfferAmounts { get; set; }
}
[Index(nameof(BuyerName))]
public class OfferAmount
{
    public int OfferAmountId { get; set; }
    public string BuyerName { get; set; }
    public decimal Amount { get; set; }
    public int OfferId { get; set; }
    public Offer Offer { get; set; }
}

public class MyDbContext : DbContext
{
    public DbSet<Offer> Offers { get; set; }
    public DbSet<OfferAmount> OfferAmounts { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<OfferAmount>()
            .HasOne(oa => oa.Offer)
            .WithMany(o => o.OfferAmounts)
            .HasForeignKey(oa => oa.OfferId);

    }
}
// return List Invoices by ids 
    public List<InvoiceDTO> GetInvoicesByIds(List<int> ListIds)
    {
        var invoices = dbContext.Invoices
            .Where(i => ListIds.Contains(i.InvoiceId))
            .Select(i => new InvoiceDTO
            {
                InvoiceId = i.InvoiceId,
                Date = i.Date,
                CustomerName = i.Customer.Name, 
                Total = i.Total
            })
            .ToList();

        return invoices;
    }


CREATE PROCEDURE GetInvoicesInDateRange
    @StartDate DATE,
    @EndDate DATE
AS
BEGIN
    SELECT
        inv.InvoiceId,
        inv.Date,
        ISNULL(cus.CustomerName, 'N/A') AS CustomerName,
        inv.Total,
        (SELECT COUNT(*) FROM InvoiceItems name WHERE name.InvoiceId = inv.InvoiceId) AS ItemsQuantity,
        (SELECT TOP 1 p.ProductName FROM InvoiceItems name JOIN Products p ON name.ProductId = p.ProductId WHERE name.InvoiceId = inv.InvoiceId ORDER BY name.Price DESC) AS MostExpensiveItem,
        (SELECT TOP 1 p.ProductName FROM InvoiceItems name JOIN Products p ON name.ProductId = p.ProductId WHERE name.InvoiceId = inv.InvoiceId ORDER BY name.Price ASC) AS CheapestItem
    FROM
        Invoices inv
    LEFT JOIN
        Customers cus ON inv.CustomerId = cus.CustomerId
    WHERE
        inv.Date >= @StartDate AND inv.Date <= @EndDate
END
